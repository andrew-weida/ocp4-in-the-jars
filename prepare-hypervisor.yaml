- name:  Prepare Hypervisor
  hosts: kvmhost
  become: true
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
      when:
        - kvmhost.set_hostname|bool

    - name: Configure hosts
      ansible.builtin.template:
        src: ansible-templates/etc/hosts.j2
        dest: /etc/hosts
        backup: true
        owner: root
        group: root
      when:
        - kvmhost.set_hosts|bool

    - name: Create ssh key on first host
      community.crypto.openssh_keypair:
        path: "{{ ansible_user_dir }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        force: false
      delegate_to: "{{ groups['kvmhost'][0] }}"
      run_once: true
      when:
        - kvmhost.create_ssh_key|bool

    - name: Fetch pub key from first host
      ansible.builtin.fetch:
        src: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
        dest: /tmp/kvmhost-id_rsa.pub
        flat: true
      delegate_to: "{{ groups['kvmhost'][0] }}"
      run_once: true
      when:
        - kvmhost.create_ssh_key|bool

    - name: Trust fetched key to all nodes
      ansible.posix.authorized_key:
        user: "{{ ansible_ssh_user }}"
        state: present
        key: "{{ lookup('file', '/tmp/kvmhost-id_rsa.pub') }}"
      when:
        - kvmhost.create_ssh_key|bool

    - name: Upgrade to latest version
      ansible.builtin.dnf:
        name: "*"
        state: latest
      register: upgrade_system

    - name: Reboot after Upgrade
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvmhost.reboot_timeout }}"
      when:
        - upgrade_system.changed

    - name: Check selinux status
      ansible.builtin.shell: |
        sestatus | egrep '^Current mode:' | sed -E 's/^Current mode:\s+//g'
      register: selinux_status
      when:
        - kvmhost.enable_selinux|bool

    - name: Enable SELinux
      ansible.builtin.selinux:
        policy: targeted
        state: enforcing
      when:
        - kvmhost.enable_selinux|bool

    - name: Create autorelabel file
      ansible.builtin.file:
        path: /.autorelabel
        state: touch
      when:
        - kvmhost.enable_selinux|bool
        - not selinux_status.stdout == "enforcing"

    - name: Reboot in order to enable selinux
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvmhost.reboot_timeout }}"
      when:
        - kvmhost.enable_selinux|bool
        - not selinux_status.stdout == "enforcing"

    - name: Comment all rp_filter
      ansible.builtin.shell: |
        for f in /etc/sysctl.conf /etc/sysctl.d/*.conf ; do 
          sed -i -E 's/^(net.*\.rp_filter.*)/#\1/g' ${f}
        done

    - name: Setting Kernel parameters
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-kvmhost.conf
        content: |
          net.ipv4.ip_forward=1
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          net.ipv4.neigh.default.gc_thresh1 = 8192
          net.ipv4.neigh.default.gc_thresh2 = 16384
          net.ipv4.neigh.default.gc_thresh3 = 32768
          net.ipv6.neigh.default.gc_thresh1 = 8192
          net.ipv6.neigh.default.gc_thresh2 = 16384
          net.ipv6.neigh.default.gc_thresh3 = 32768

    - name: Create provisioning bridge template
      ansible.builtin.template:
        src: ansible-templates/root/kvmhost-provisioning-net.sh
        dest: /root/kvmhost-provisioning-net.sh
        mode: 0755
        owner: root
        group: root
      when:
        - not redfish.enable|bool
        - kvmhost.provisioning_bridge_create|bool

    # on this case (isolated) the bridge kept default gw ip
    - name: Create provisioning bridge - isolated
      when: 
        - not redfish.enable|bool
        - kvmhost.provisioning_bridge_create|bool
        - kvmhost.provisioning_bridge_isolated|bool
      block:
      - name: Create provisioning bridge
        community.general.nmcli:
          type: bridge
          conn_name: "{{ bridge_prov }}"
          ifname: "{{ bridge_prov }}"
          ip4: "{{ provision_net.bridge_prov_ip }}/{{ provision_net.prefix }}"
          stp: false
          mtu: "{{ provision_net.mtu }}"
          state: present

      - name: Add vbmc_ip to provisioning bridge - isolated
        ansible.builtin.shell: |
          nmcli connection modify {{ bridge_prov }} +ipv4.addresses {{ item.vbmc_ip }}/{{ provision_net.prefix }}
        with_items:
          - "{{ master_nodes }}"
          - "{{ worker_nodes }}"
          - "{{ utility_nodes }}"
          - "{{ bastion_nodes }}"

      - name: Fix mtu for isolated network - provisioning
        ansible.builtin.shell: |
          nmcli connection modify {{ bridge_prov }} 802-3-ethernet.mtu {{ provision_net.mtu }}

    - name: Create provisioning bridge (not isolated)
      when: 
        - not redfish.enable|bool
        - not kvmhost.provisioning_bridge_isolated|bool
      block:
      - name: Create provisioning bridge - steal ip
        ansible.builtin.shell: |
          nohup /root/kvmhost-provisioning-net.sh &

      - name: Add vbmc_ip to provisioning bridge
        ansible.builtin.shell: |
          nmcli connection modify {{ bridge_prov }} +ipv4.addresses {{ item.vbmc_ip }}/{{ provision_net.prefix }}
        with_items:
          - "{{ master_nodes }}"
          - "{{ worker_nodes }}"
          - "{{ utility_nodes }}"
          - "{{ bastion_nodes }}"
        when:
          - ansible_nodename == item.hypervisor_name

    - name: Create baremetal bridge - isolated
      community.general.nmcli:
        type: bridge
        conn_name: "{{ bridge_bm }}"
        ifname: "{{ bridge_bm }}"
        ip4: "{{ baremetal_net.gateway }}/{{ baremetal_net.prefix }}"
        stp: false
        mtu: "{{ baremetal_net.mtu }}"
        state: present
      when:
        - kvmhost.baremetal_bridge_create|bool
        - kvmhost.baremetal_bridge_isolated|bool

    - name: Fix mtu for isolated network - baremetal
      ansible.builtin.shell: |
        nmcli connection modify {{ bridge_bm }} 802-3-ethernet.mtu {{ baremetal_net.mtu }}
      when:
        - kvmhost.baremetal_bridge_create|bool
        - kvmhost.baremetal_bridge_isolated|bool

    - name: Generate script (kvmhost-baremetal-net.sh) to create baremetal bridge (not isolated)
      ansible.builtin.template:
        src: ansible-templates/root/kvmhost-baremetal-net.sh
        dest: /root/kvmhost-baremetal-net.sh
        mode: 0755
        owner: root
        group: root
      when:
        - kvmhost.baremetal_bridge_create|bool
        - not kvmhost.baremetal_bridge_isolated|bool

    - name: Create baremetal bridge (not isolated)
      ansible.builtin.shell: |
        nohup /root/kvmhost-baremetal-net.sh &
      when:
        - kvmhost.baremetal_bridge_create|bool
        - not kvmhost.baremetal_bridge_isolated|bool

    - name: Add baremetal ip
      ansible.builtin.shell: |
        nmcli connection modify {{ bridge_bm }} ipv4.method manual +ipv4.addresses {{ baremetal_ip }}/{{ baremetal_net.prefix }}
      when:
        - kvmhost.baremetal_bridge_create|bool
        - baremetal_ip is defined
        - kvmhost.enable_baremetal_gw|bool

    - name: Reboot after creating bridges
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvmhost.reboot_timeout }}"
      when:
        - kvmhost.provisioning_bridge_create|bool or kvmhost.baremetal_bridge_create|bool

    - name: Getting rp_filter variables to set
      ansible.builtin.shell: |
        sysctl -A 2> /dev/null | grep "\.rp_filter"  | cut -d"=" -f1
      register: sysctl_rp_filter

    - name: Setting Systcl rp_filter variables dynamically
      sysctl:
        name: "{{ item }}"
        value: '0'
        sysctl_set: yes
        state: present
        sysctl_file: /etc/sysctl.d/99-kvmhost.conf
      ignore_errors: true
      with_items:
        - "{{ sysctl_rp_filter.stdout_lines }}"

    - name: restart sysctl
      ansible.builtin.systemd_service:
        name: systemd-sysctl.service
        state: restarted

    - name: enable virt module
      ansible.builtin.shell: |
        dnf module enable virt:rhel
        dnf distro-sync -y

    - name: Install some packages
      ansible.builtin.dnf:
        name:
          - tmux
          - nmap
          - tcpdump
          - bind-utils
          - jq
          - bash-completion
          - git
          - iptables-services
          - NetworkManager-libnm
          - python3-libsemanage
          - policycoreutils-python-utils
          - nm-connection-editor
          - python3-policycoreutils
          - pciutils
          - libvirt
          - qemu-kvm
          - virt-install
          - virt-top
          - guestfs-tools
          - libguestfs-tools
          - libguestfs-xfs
          - virt-viewer
          - net-tools
          - mlocate
          - sshpass
          - podman
          - ipmitool
          - tree
          - httpd-tools
          - ansible
        state: present

    - name: Install keepalived
      ansible.builtin.dnf:
        name:
          - keepalived
        state: present
      when:
        - kvmhost.enable_baremetal_gw|bool
        - baremetal_ip is defined

    - name: Install virtualbmc
      ansible.builtin.pip:
        name: virtualbmc
        state: present
      when:
        - not redfish.enable|bool

    - name: Enable virtualbmc service
      ansible.builtin.systemd_service:
        name: virtualbmc.service
        state: started
        enabled: true
      when:
        - not redfish.enable|bool

    - name: Add sushy-tools user to libvirt group
      ansible.builtin.user:
        name: sushy-tools
        groups: libvirt
        append: true
      when:
        - redfish.enable|bool

    - name: Ensure /etc/sushy-emulator directory exists
      ansible.builtin.file:
        path: /etc/sushy-emulator
        state: directory
        mode: '0755'

    - name: Create auth file for sushy-tools
      ansible.builtin.shell: "htpasswd -c -B -b /etc/sushy-emulator/auth_file admin {{ secure_password }}"
      when:
        - redfish.enable|bool

    - name: Ensure private key is present
      community.crypto.openssl_privatekey:
        path: /etc/sushy-emulator/sushy-tools.key
        size: 2048
        mode: 0640
        owner: root
        group: sushy-tools
        type: RSA
      when:
        - redfish.enable|bool

    - name: Ensure self-signed cert is present
      community.crypto.x509_certificate:
        path: /etc/sushy-emulator/sushy-tools.crt
        privatekey_path: /etc/sushy-emulator/sushy-tools.key
        provider: selfsigned
        selfsigned_not_after: "+3650d" # this is the default
        mode: 0644
      when:
        - redfish.enable|bool

    - name: Configure sushy-emulator.conf
      ansible.builtin.template:
        src: ansible-templates/etc/sushy-emulator/sushy-emulator.conf.j2
        dest: /etc/sushy-emulator/sushy-emulator.conf
        owner: root
        group: sushy-tools
        mode: 0640
        backup: true
      when:
        - redfish.enable|bool

    - name: Configure sushy-emulator systemd unit (quadlet)
      ansible.builtin.template:
        src: ansible-templates/etc/sushy-emulator/sushy-emulator.container.j2
        dest: /etc/containers/systemd/sushy-emulator.container
        owner: root
        group: sushy-tools
        mode: 0640
        backup: true
      when:
        - redfish.enable|bool

    - name: Restart sushy-emulator service
      ansible.builtin.systemd_service:
        name: sushy-emulator
        daemon_reload: true
        state: restarted
        enabled: true
      when:
        - redfish.enable|bool

- name: Include a playbook to configure firewall rules
  ansible.builtin.import_playbook: configure-firewall.yaml

- name:  Finish Preparing Hypervisor
  hosts: kvmhost
  become: true
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
    - name: Ensure nested virtualization are enabled
      ansible.builtin.copy:
        dest: /etc/modprobe.d/kvm.conf
        content: |
          # Setting modprobe kvm_intel/kvm_amd nested = 1
          # only enables Nested Virtualization until the next reboot or
          # module reload. Uncomment the option applicable
          # to your system below to enable the feature permanently.
          #
          # User changes in this file are preserved across upgrades.
          #
          # For Intel
          options kvm_intel nested=1
          #
          # For AMD
          options kvm_amd nested=1
      register: enable_nested

    - name: Run dracut
      ansible.builtin.shell: |
        dracut -fv
      when:
        - enable_nested.changed

    - name: Reboot after dracut
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvmhost.reboot_timeout }}"
      when:
        - enable_nested.changed

    - name: Restart Libvirtd Service
      ansible.builtin.systemd_service:
        state: restarted
        name: libvirtd
        enabled: true

    - name: Check if pool default is present
      ansible.builtin.shell: |
        virsh pool-list | egrep '\s+default'
      register: pool_default
      failed_when: pool_default.rc|float > 100
      when:
        - redfish.enable|bool

    - name: Create template for default pool
      ansible.builtin.template:
        src: ansible-templates/root/default_pool.xml.j2
        dest: /root/default_pool.xml
        owner: root
        group: root
        mode: 0644
      when:
        - redfish.enable|bool
        - pool_default.rc|float > 0

    - name: Create template for default pool
      ansible.builtin.template:
        src: ansible-templates/root/default_pool.sh
        dest: /root/default_pool.sh
        owner: root
        group: root
        mode: 0755
      when:
        - redfish.enable|bool
        - pool_default.rc|float > 0

    - name: Define default pool
      ansible.builtin.shell: |
        nohup /root/default_pool.sh
      when:
        - redfish.enable|bool
        - pool_default.rc|float > 0

    - name: Restart Libvirtd Service
      ansible.builtin.systemd_service:
        state: restarted
        name: libvirtd
        enabled: true
      when:
        - redfish.enable|bool
        - pool_default.rc|float > 0

    - name: Generate rand password
      ansible.builtin.shell: |
        openssl rand -hex 20
      run_once: true
      register: rand_password
      when:
        - insecure_password is not defined
        - kvmhost.enable_baremetal_gw

    - name: Set insecure_password
      ansible.builtin.set_fact:
        insecure_password: "{{ rand_password.stdout }}"
      when:
        - insecure_password is not defined
        - kvmhost.enable_baremetal_gw

    - name: Configure keepalived
      ansible.builtin.template:
        src: ansible-templates/etc/keepalived/keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
        backup: true
        mode: 0644
        owner: root
        group: root
      when:
        - kvmhost.enable_baremetal_gw

    - name: Restart keepalived
      ansible.builtin.systemd_service:
        name: keepalived.service
        state: restarted
        enabled: true
      when:
        - kvmhost.enable_baremetal_gw

    - name: clone repo
      shell: |
        cd /root
        git clone https://github.com/andrew-weida/ocp4-homelab.git
        cd /root/ocp4-homelab
        git pull
      ignore_errors: true
      when:
        - kvmhost.provisioning_bridge_isolated|bool
        - kvmhost.baremetal_bridge_isolated|bool

    - name: Create images dir
      ansible.builtin.file:
        path: /root/images
        state: directory

    - name: Overwrite bm-ansible-nodes.json file
      ansible.builtin.copy:
        backup: true
        src: bm-ansible-nodes-disconnected.json
        dest: /root/ocp4-homelab/bm-ansible-nodes.json
      when:
        - kvmhost.provisioning_bridge_isolated|bool
        - kvmhost.baremetal_bridge_isolated|bool

    - name: Overwrite image_location
      ansible.builtin.shell: |
        IMAGE=$(egrep '^image:\s+' /root/ocp4-homelab/variables.yaml | sed -E 's/^image:\s+//g')
        sed -i -E "s@^image_location:\s+.*@image_location: /root/images/${IMAGE}@g" /root/ocp4-homelab/variables.yaml
      when:
        - kvmhost.provisioning_bridge_isolated|bool
        - kvmhost.baremetal_bridge_isolated|bool

    - name: Overwrite replace_ddns_duckdns
      ansible.builtin.shell: |
        sed -i -E 's/replace_ddns_duckdns:.*/replace_ddns_duckdns: true/g' /root/ocp4-homelab/variables.yaml
      when:
        - enable_ddns_duckdns|bool
        - kvmhost.provisioning_bridge_isolated|bool
        - kvmhost.baremetal_bridge_isolated|bool or ( redfish.enable|bool and redfish.enable_nat|bool )

    - name: Final messages
      ansible.builtin.debug:
        msg:
          - "#####################################################################################"
          - "# Please connect in ssh to your Hypervisor and run:                                 #"
          - "#                                                                                   #"
          - "# scp <rhel9image.qcow2> <yourhypervisor>:/root/images/                             #"
          - "# cd /root/ocp4-homelab                                                         #"
          - '# ansible-playbook --extra-vars "@custom-variables.yaml" main.yaml                #'
          - "#                                                                                   #"
          - "# if you want to use OpenShift API and/or console outside your Hypervisor,          #"
          - "# for example from your Linux box, add the following lines to your /etc/hosts file: #"
          - "#                                                                                   #"
          - "# {{ ansible_default_ipv4.address }} api.{{ domain }}                                              #"
          - "# {{ ansible_default_ipv4.address }} oauth-openshift.apps.{{ domain }}                             #"
          - "# {{ ansible_default_ipv4.address }} console-openshift-console.apps.{{ domain }}                   #"
          - "#                                                                                   #"
          - "#####################################################################################"
      delegate_to: "{{ groups['kvmhost'][0] }}"
      run_once: true
      when:
        - ( kvmhost.baremetal_bridge_isolated|bool and kvmhost.provisioning_bridge_isolated|bool ) or ( redfish.enable|bool and redfish.enable_nat|bool )

