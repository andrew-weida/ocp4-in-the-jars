- name: Add hypervisor host in inventory
  hosts: localhost
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
  - name: Add all hypervisor group-host
    ansible.builtin.add_host:
      name: "{{ item.hypervisor_name }}"
      ansible_ssh_user: "{{ item.hypervisor_user }}"
      ansible_ssh_private_key_file: "{{ item.hypervisor_ssh_key }}"
      groups:
        - hypervisor_host
    with_items: "{{ bastion_nodes }}"
    when: item.hypervisor_name != "localhost"

- name: Build Bastion VM/Node
  hosts:
    - localhost
    - hypervisor_host
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
    - name: Copying Template Image to create bastion. RHEL9
      ansible.builtin.copy:
        src: "{{ item.hypervisor_image_dir }}/rhel9-bastion.qcow2"
        dest: "{{ item.hypervisor_image_dir }}/bastion.qcow2"
        remote_src: true
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Defining the bastion vm - virtualbmc
      ansible.builtin.shell: |
        virt-install --ram {{ bastion.memory }} --vcpus {{ bastion.cpu }} --os-variant rhel9.4 --disk path={{ item.hypervisor_image_dir }}/bastion.qcow2,device=disk,bus=virtio,format=qcow2 --noautoconsole --vnc --network bridge:{{ bridge_prov }} --network bridge:{{ bridge_bm }} --name {{ item.name }} --cpu host-passthrough --dry-run --print-xml > /tmp/{{ item.name }}.xml
        virsh define /tmp/{{ item.name }}.xml
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - not redfish.enable|bool

    - name: Defining the bastion vm - redfish
      ansible.builtin.shell: |
        virt-install \
            --vnc \
            --dry-run \
            --noautoconsole \
            --os-variant rhel9.4 \
            --name {{ item.name }} \
            --cpu host-passthrough \
            --ram {{ bastion.memory }} \
            --vcpus {{ bastion.cpu }} \
            --network bridge:{{ bridge_bm }} \
            --disk path={{ item.hypervisor_image_dir }}/bastion.qcow2,device=disk,bus=virtio,format=qcow2 \
            --print-xml >/tmp/{{ item.name }}.xml
        virsh define /tmp/{{ item.name }}.xml
      environment:
        LIBGUESTFS_BACKEND: "direct"
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - redfish.enable|bool

    # TODO: check ip address available in the hypervisor
    - name: Create virtualbmc interface
      ansible.builtin.shell: |
        vbmc add "{{ item.name }}" --address "{{ item.vbmc_ip }}" --port "{{ item.vbmc_port }}" --username admin --password "{{ secure_password }}"
        vbmc start "{{ item.name }}"
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - not redfish.enable|bool

    - name: Starting bastion vm
      community.libvirt.virt:
        name: "{{ item.name }}"
        state: running
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Sleeping till ssh on bastion vm is up - virtualbmc
      ansible.builtin.wait_for:
        port: 22
        host: "{{ item.provisioning_ip }}"
        delay: 20
        timeout: 300
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - not redfish.enable|bool

    - name: Sleeping till ssh on bastion vm is up - redfish
      ansible.builtin.wait_for:
        port: 22
        host: "{{ item.baremetal_ip }}"
        delay: 20
        timeout: 300
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - redfish.enable|bool

    - name: Remove temp directory for ssh key
      ansible.builtin.file:
        path: ansible-ssh
        state: absent
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Create temp directory for ssh key
      ansible.builtin.file:
        path: ansible-ssh
        state: directory
        mode: '0700'
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Write ssh key
      ansible.builtin.template:
        dest: "ansible-ssh/id_rsa"
        src: "{{ ssh_key }}"
        mode: 0600
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Add newline at the end of ssh key
      ansible.builtin.shell: |
        echo  >> ansible-ssh/id_rsa
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Update /etc/hosts with bastion entry - virtualbmc
      ansible.builtin.lineinfile:
        path: /etc/hosts
        backup: true
        regexp: "{{ item.name }}.{{ domain }}"
        line: "{{ item.provisioning_ip }}\t{{ item.name }}.{{ domain }}\t{{ item.name }}"
        state: present
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - not redfish.enable|bool

    - name: Update /etc/hosts with bastion entry - redfish
      ansible.builtin.lineinfile:
        path: /etc/hosts
        backup: true
        regexp: "{{ item.name }}.{{ domain }}"
        line: "{{ item.baremetal_ip }}\t{{ item.name }}.{{ domain }}\t{{ item.name }}"
        state: present
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"
      when:
        - redfish.enable|bool

    - name: Ensure .ssh directory is present
      ansible.builtin.file:
        path: ~/.ssh
        state: directory
        mode: '0700'
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Create ssh/config file
      ansible.builtin.file:
        path: ~/.ssh/config
        state: touch
        mode: '0644'
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Write ssh/config file
      ansible.builtin.blockinfile:
        path: ~/.ssh/config
        backup: true
        state: present
        block: |
          Host {{ item.name }}.{{ domain }}
          IdentityFile ~/ansible-ssh/id_rsa
      delegate_to: "{{ item.hypervisor_name }}"
      run_once: true
      with_items: "{{ bastion_nodes }}"

    - name: Add bastion group-host - no localhost
      ansible.builtin.add_host:
        name: "{{ item.name }}.{{ domain }}"
        ansible_ssh_user: root
        ansible_ssh_pass: "{{ secure_password }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q {{ item.hypervisor_user }}@{{ item.hypervisor_name }}"'
        groups:
          - bastion
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name != "localhost"

    - name: Add bastion group-host - localhost
      ansible.builtin.add_host:
        name: "{{ item.name }}.{{ domain }}"
        ansible_ssh_user: root
        ansible_ssh_pass: "{{ secure_password }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
        groups:
          - bastion
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name == "localhost"

    - name: Write commodity hosts-bastion-root file - no localhost
      ansible.builtin.copy:
        dest: hosts-bastion-root
        content: |
          [bastion]
          {{ item.name }}.{{ domain }} ansible_ssh_user=root ansible_ssh_pass={{ secure_password }} ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q {{ item.hypervisor_user }}@{{ item.hypervisor_name }}"'
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name != "localhost"

    - name: Write commodity hosts-bastion-root file - localhost
      ansible.builtin.copy:
        dest: hosts-bastion-root
        content: |
          [bastion]
          {{ item.name }}.{{ domain }} ansible_ssh_user=root ansible_ssh_pass={{ secure_password }} ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name == "localhost"

    - name: Write commodity hosts-bastion-kni file - no locahost
      ansible.builtin.copy:
        dest: hosts-bastion-kni
        content: |
          [bastion]
          {{ item.name }}.{{ domain }} ansible_ssh_user=kni ansible_ssh_pass={{ secure_password }} ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q {{ item.hypervisor_user }}@{{ item.hypervisor_name }}"'
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name != "localhost"

    - name: Write commodity hosts-bastion-kni file - locahost
      ansible.builtin.copy:
        dest: hosts-bastion-kni
        content: |
          [bastion]
          {{ item.name }}.{{ domain }} ansible_ssh_user=kni ansible_ssh_pass={{ secure_password }} ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
      with_items: "{{ bastion_nodes }}"
      when: item.hypervisor_name == "localhost"

- name:  Prepare Bastion Node
  hosts: bastion
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
    - name: Setting up hostname
      ansible.builtin.hostname:
        name: "bastion.{{ domain }}"

    - name: Set timezone to UTC
      community.general.timezone:
        name: UTC

    - name: Registering Bastion
      redhat_subscription:
        state: present
        username: "{{ rh_subcription_user }}"
        password: "{{ rh_subcription_password }}"
        force_register: true

    - name: Attach poolid
      ansible.builtin.shell: |
        subscription-manager attach --pool={{ rh_subcription_pool }}

    - name: Set base repository for the bastion
      ansible.builtin.shell: |
        subscription-manager repos --disable='*' --enable=rhel-9-for-x86_64-baseos-rpms --enable=rhel-9-for-x86_64-appstream-rpms

    - name: Clean yum cache
      ansible.builtin.command: yum clean all

    - name: Updating system to latest version
      ansible.builtin.dnf:
        name: '*'
        state: latest

    - name: Reboot bastion
      ansible.builtin.reboot:

    - name: Install Basic Required Packages
      ansible.builtin.dnf:
        name:
          - ansible-core
          - podman
          - bind-utils
          - wget
          - mlocate
          - sshpass
          - tmux
          - iptables
          - bash-completion
          - tree
          - ipmitool
          - nmap
          - git

    - name: Create User kni
      ansible.builtin.user:
        name: kni

    - name: Reset kni password
      ansible.builtin.shell: |
        echo -n {{ secure_password }} | passwd --stdin kni

    - name: Assign sudo power to kni user
      ansible.builtin.copy:
        dest: /etc/sudoers.d/kni
        content: |
          kni ALL=(root) NOPASSWD:ALL

    - name: Setting proper permission to /etc/sudoers.d/kni
      ansible.builtin.file:
        path: /etc/sudoers.d/kni
        mode: '0440'

    - name: Creates /home/kni/.ssh directory
      ansible.builtin.file:
        path: /home/kni/.ssh
        owner: kni
        group: kni
        mode: 0700
        state: directory

    - name: Copy Root Authorized Keys to kni User
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/kni/.ssh/authorized_keys
        remote_src: yes

    - name: Copy ssh hey
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: kni
        group: kni
        mode: "{{ item.mode }}"
      with_items:
        - { src: files/.ssh/id_rsa, dest: /home/kni/.ssh/id_rsa, mode: "0600" }
        - { src: files/.ssh/id_rsa.pub, dest: /home/kni/.ssh/id_rsa.pub, mode: "0644" }

    - name: Add newline at the end of ssh key
      ansible.builtin.shell: |
        echo  >> /home/kni/.ssh/id_rsa

    - name: Setting proper ownership to /home/kni/.ssh/authorized_keys
      ansible.builtin.file:
        path: /home/kni/.ssh/authorized_keys
        owner: kni
        group: kni
